{"version":3,"file":"components-HelperText-index-stories.eb047382.iframe.bundle.js","mappings":";;AAyEA;;;AAGA;;AAEA;;;;AAIA;;;;;;;;;;;;AAYA;AApFA;AAIA;AAwBA;AAlBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAMA;AAEA;AAKA;AACA;AA8CA;AACA;AAvCA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AA4BA;AAGA;;;AAGA;AAGA;;;;;;;;;;ACpGA","sources":["webpack://ui/./src/components/HelperText/style.ts","webpack://ui/./src/components/HelperText/index.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { HelperTextProps } from './types';\n\ninterface StyledHelperTextProps extends HelperTextProps {\n  theme: any;\n}\n\nconst getColorStyles = ({ theme, hasError, color }: StyledHelperTextProps) => {\n  if (hasError) {\n    return css`\n      color: ${theme.colors.error};\n    `;\n  }\n  \n  if (color) {\n    switch (color) {\n      case 'primary':\n        return css`\n          color: ${theme.colors.primary};\n        `;\n      case 'secondary':\n        return css`\n          color: ${theme.colors.secondary};\n        `;\n      case 'error':\n        return css`\n          color: ${theme.colors.error};\n        `;\n      case 'warning':\n        return css`\n          color: ${theme.colors.warning};\n        `;\n      case 'success':\n        return css`\n          color: ${theme.colors.success};\n        `;\n      case 'info':\n        return css`\n          color: ${theme.colors.primary};\n        `;\n      default:\n        return css`\n          color: ${theme.colors.onSurface.mediumEmphasis};\n        `;\n    }\n  }\n  \n  return css`\n    color: ${theme.colors.onSurface.mediumEmphasis};\n  `;\n};\n\nconst getSizeStyles = ({ size = 'medium', theme }: StyledHelperTextProps) => {\n  switch (size) {\n    case 'small':\n      return css`\n        font-size: ${theme.typography.caption?.fontSize || '12px'};\n        line-height: ${theme.typography.caption?.lineHeight || '16px'};\n      `;\n    case 'large':\n      return css`\n        font-size: ${theme.typography.body1.fontSize};\n        line-height: ${theme.typography.body1.lineHeight};\n      `;\n    default: // medium\n      return css`\n        font-size: ${theme.typography.body2.fontSize};\n        line-height: ${theme.typography.body2.lineHeight};\n      `;\n  }\n};\n\nexport const StyledHelperText = styled.div<HelperTextProps>`\n  font-family: ${({ theme }) => theme.typography.fontFamily};\n  font-weight: 400;\n  margin: 0;\n  transition: color ${({ theme }) => theme.transitions?.duration || '0.2s'} ${({ theme }) => theme.transitions?.easing || 'ease'};\n  \n  ${({ isSubtle }) => isSubtle && css`\n    opacity: 0.7;\n  `}\n  \n  ${({ srOnly }) => srOnly && css`\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  `}\n  \n  ${(props) => getColorStyles(props as StyledHelperTextProps)}\n  ${(props) => getSizeStyles(props as StyledHelperTextProps)}\n`;\n\nexport const HelperTextContent = styled.div`\n  display: flex;\n  align-items: flex-start;\n  gap: ${({ theme }) => theme.spacing.xs};\n`;\n\nexport const HelperTextIcon = styled.span<{ theme: any }>`\n  display: inline-flex;\n  align-items: center;\n  margin-top: 1px; /* Slight adjustment to align with text */\n  flex-shrink: 0;\n  \n  svg {\n    width: 1em;\n    height: 1em;\n  }\n`;\n","import React, { forwardRef } from 'react';\nimport { HelperTextProps, HelperTextComponent } from './types';\nimport { StyledHelperText, HelperTextContent, HelperTextIcon } from './style';\n\nconst HelperText: HelperTextComponent = forwardRef<HTMLDivElement, HelperTextProps>(\n  (\n    {\n      children,\n      hasError = false,\n      size = 'medium',\n      className,\n      id,\n      srOnly = false,\n      color,\n      startIcon,\n      isSubtle = false,\n      ...rest\n    },\n    ref\n  ) => {\n    if (!children) return null;\n\n    const content = startIcon ? (\n      <HelperTextContent>\n        <HelperTextIcon>\n          {startIcon}\n        </HelperTextIcon>\n        <span>{children}</span>\n      </HelperTextContent>\n    ) : (\n      children\n    );\n\n    return (\n      <StyledHelperText\n        ref={ref}\n        id={id}\n        className={className}\n        hasError={hasError}\n        size={size}\n        srOnly={srOnly}\n        color={color}\n        isSubtle={isSubtle}\n        role={hasError ? 'alert' : undefined}\n        aria-live={hasError ? 'polite' : undefined}\n        {...rest}\n      >\n        {content}\n      </StyledHelperText>\n    );\n  }\n);\n\nHelperText.displayName = 'HelperText';\n\nexport default HelperText;\n"],"names":[],"sourceRoot":""}