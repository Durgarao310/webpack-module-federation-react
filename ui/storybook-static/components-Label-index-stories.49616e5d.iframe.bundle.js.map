{"version":3,"file":"components-Label-index-stories.49616e5d.iframe.bundle.js","mappings":";;;;AAUA;;;AAGA;AAMA;AACA;AACA;AACA;AACA;;;;;AAMA;;;AAGA;AAGA;;;;AAIA;AAGA;;;;;;;;;;ACrCA","sources":["webpack://ui/./src/components/Label/styles.ts","webpack://ui/./src/components/Label/index.tsx"],"sourcesContent":["// src/components/FormComponents/Label/Label.styles.ts\nimport styled, { css } from 'styled-components';\n\nexport const StyledLabel = styled.label<{\n  $isError?: boolean;\n  $isDisabled?: boolean;\n  $size?: 'small' | 'medium' | 'large';\n}>`\n  display: inline-flex;\n  align-items: center;\n  gap: ${({ theme }) => theme.spacing.sm}; /* Example: theme.spacing.small from your M3 theme */\n\n  /* --- REFINED TYPOGRAPHY APPLICATION --- */\n  ${({ theme, $size }) => {\n    // Determine which typography tokens to use based on the size prop\n    // Default to 'small' if $size is not explicitly provided or is undefined\n    const typographyTokens = theme.typography.label[$size || 'small'];\n\n    return css`\n      font-family: ${typographyTokens.fontFamily};\n      font-size: ${typographyTokens.fontSize};\n      font-weight: ${typographyTokens.fontWeight};\n      line-height: ${typographyTokens.lineHeight};\n      letter-spacing: ${typographyTokens.letterSpacing};\n    `;\n  }}\n  /* --- END REFINED TYPOGRAPHY APPLICATION --- */\n\n\n  color: ${({ theme }) => theme.colors.onSurfaceVariant}; /* Default M3 label color */\n\n  /* Apply error state styles */\n  ${({ $isError, theme }) =>\n    $isError &&\n    css`\n      color: ${theme.colors.error};\n    `}\n\n  /* Apply disabled state styles */\n  ${({ $isDisabled, theme }) =>\n    $isDisabled &&\n    css`\n      color: ${theme.colors.onSurface.withOpacity(0.38)}; /* M3 disabled opacity */\n      cursor: not-allowed;\n    `}\n\n  .label-icon {\n    display: flex;\n    align-items: center;\n    /* You might want to size icons consistently here or via icon component props */\n    color: inherit; /* Icons inherit label color */\n  }\n`;","// src/components/FormComponents/Label/Label.tsx\nimport React from 'react';\nimport { LabelProps } from './types';\nimport { StyledLabel } from './styles';\n\nconst Label: React.FC<LabelProps> = ({\n  children,\n  startingIcon,\n  endIcon,\n  htmlFor,\n  isError = false,\n  isDisabled = false,\n  size = 'medium', // Default size to 'medium'\n}) => {\n  return (\n    <StyledLabel\n      htmlFor={htmlFor}\n      $isError={isError}\n      $isDisabled={isDisabled}\n      $size={size} // Pass the size prop\n    >\n      {startingIcon && <span className=\"label-icon\">{startingIcon}</span>}\n      {children}\n      {endIcon && <span className=\"label-icon\">{endIcon}</span>}\n    </StyledLabel>\n  );\n};\n\nexport default Label;"],"names":[],"sourceRoot":""}