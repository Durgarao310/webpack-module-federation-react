{"version":3,"file":"components-Dialog-index-stories.06e658af.iframe.bundle.js","mappings":";;;;;AAyEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AAWA;;;;AAIA;;AA/EA;AACA;;;AAGA;;AAGA;;;AAIA;;;AAGA;;AAGA;AAEA;AACA;AACA;;;;;AA0DA;AACA;AA5CA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AA8BA;AAGA;;;;;AAKA;;;;AAIA;;;AAKA;;;;;;;;;;;;;;;;;AAmBA;;;;AAIA;;AAIA;;;;;;;;AChIA;;;ACFA;;;;;;;;;AAWA;;;;;;;;AAQA;AAGA;AACA;AACA;;;;;;;;AAQA;;;;;AAOA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AAKA;AACA;;;AAGA;ACvDA;;AD4DA;AACA;;;AAGA;;;AChEA","sources":["webpack://ui/./src/components/Button/style.ts","webpack://ui/./src/components/Button/index.tsx","webpack://ui/./src/components/Dialog/style.ts","webpack://ui/./src/components/Dialog/index.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { ButtonProps } from './types';\n\ninterface StyledButtonProps extends ButtonProps {\n  theme: any;\n}\n\nconst getVariantStyles = ({ theme, variant = 'filled', color = 'primary' }: StyledButtonProps) => {\n  const colorValue = theme.colors[color];\n  \n  switch (variant) {\n    case 'outlined':\n      return css`\n        background-color: transparent;\n        border: 1px solid ${colorValue};\n        color: ${colorValue};\n\n        &:hover:not(:disabled) {\n          background-color: ${theme.colors.onSurface.withOpacity(0.1)};\n        }\n      `;\n    case 'text':\n      return css`\n        background-color: transparent;\n        border: 1px solid transparent;\n        color: ${colorValue};\n\n        &:hover:not(:disabled) {\n          background-color: ${theme.colors.onSurface.withOpacity(0.1)};\n        }\n      `;\n    default: // filled\n      return css`\n        background-color: ${colorValue};\n        color: ${theme.colors.onPrimary};\n        border: 1px solid ${colorValue};\n\n        &:hover:not(:disabled) {\n          opacity: 0.9;\n        }\n      `;\n  }\n};\n\nconst getSizeStyles = ({ size = 'medium', theme }: StyledButtonProps) => {\n  const buttonHeight = theme.componentSizes.buttonHeight;\n  \n  switch (size) {\n    case 'small':\n      return css`\n        font-size: ${theme.typography.label.small.fontSize};\n        height: ${buttonHeight.small};\n        padding: 0 ${theme.spacing.md};\n      `;\n    case 'large':\n      return css`\n        font-size: ${theme.typography.label.large.fontSize};\n        height: ${buttonHeight.large};\n        padding: 0 ${theme.spacing.xl};\n      `;\n    default: // medium\n      return css`\n        font-size: ${theme.typography.label.medium.fontSize};\n        height: ${buttonHeight.medium};\n        padding: 0 ${theme.spacing.lg};\n      `;\n  }\n};\n\nexport const StyledButton = styled.button<ButtonProps>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: ${({ theme }) => theme.componentSizes.borderRadius};\n  font-weight: ${({ theme }) => theme.typography.button.fontWeight};\n  font-family: ${({ theme }) => theme.typography.button.fontFamily};\n  transition: all ${({ theme }) => theme.transitions.duration} ${({ theme }) => theme.transitions.easing};\n  cursor: pointer;\n  width: ${({ isFullWidth }) => (isFullWidth ? '100%' : 'auto')};\n  position: relative;\n  text-decoration: none;\n  outline: none;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  &:focus-visible {\n    outline: 2px solid ${({ theme }) => theme.colors.primary};\n    outline-offset: 2px;\n  }\n\n  ${(props) => getVariantStyles(props as StyledButtonProps)}\n  ${(props) => getSizeStyles(props as StyledButtonProps)}\n`;\n\nexport const ButtonIcon = styled.span<{ position: 'start' | 'end' }>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  \n  ${({ position }) => position === 'start' && css`\n    margin-right: 0.5rem;\n  `}\n  \n  ${({ position }) => position === 'end' && css`\n    margin-left: 0.5rem;\n  `}\n`;\n\nexport const LoadingSpinner = styled.div`\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top: 2px solid currentColor;\n  border-right: 2px solid currentColor;\n  width: 1em;\n  height: 1em;\n  animation: spin 0.8s linear infinite;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nexport const ButtonContent = styled.span<{ isLoading?: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: ${({ isLoading }) => (isLoading ? 0 : 1)};\n  transition: opacity 0.2s ease-in-out;\n`;\n\nexport const LoadingWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import React, { forwardRef } from 'react';\nimport { ButtonProps, ButtonComponent } from './types';\nimport { \n  StyledButton, \n  ButtonIcon, \n  LoadingSpinner, \n  ButtonContent, \n  LoadingWrapper \n} from './style';\n\nconst Button: ButtonComponent = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      children,\n      startIcon,\n      endIcon,\n      isDisabled = false,\n      size = 'medium',\n      isLoading = false,\n      isFullWidth = false,\n      type = 'button',\n      variant = 'filled',\n      color = 'primary',\n      onClick,\n      className,\n      ...rest\n    },\n    ref\n  ) => {\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (isDisabled || isLoading) {\n        event.preventDefault();\n        return;\n      }\n      onClick?.(event);\n    };\n\n    return (\n      <StyledButton\n        ref={ref}\n        type={type}\n        disabled={isDisabled || isLoading}\n        onClick={handleClick}\n        className={className}\n        size={size}\n        variant={variant}\n        color={color}\n        isFullWidth={isFullWidth}\n        isLoading={isLoading}\n        {...rest}\n      >\n        {isLoading && (\n          <LoadingWrapper>\n            <LoadingSpinner />\n          </LoadingWrapper>\n        )}\n        \n        <ButtonContent isLoading={isLoading}>\n          {startIcon && (\n            <ButtonIcon position=\"start\">\n              {startIcon}\n            </ButtonIcon>\n          )}\n          \n          {children}\n          \n          {endIcon && (\n            <ButtonIcon position=\"end\">\n              {endIcon}\n            </ButtonIcon>\n          )}\n        </ButtonContent>\n      </StyledButton>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport default Button;\n","// components/Dialog/Dialog.styles.ts\nimport styled, { keyframes } from 'styled-components';\n\nconst fadeIn = keyframes`\n  from { opacity: 0; }\n  to { opacity: 1; }\n`;\n\nconst slideUp = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(16px) scale(0.98);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n`;\n\nexport const DialogOverlay = styled.div`\n  position: fixed;\n  inset: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 1000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation: ${fadeIn} 0.2s ease-out;\n`;\n\nexport const DialogContainer = styled.div`\n  background: ${({ theme }) => theme.colors.surface};\n  border-radius: ${({ theme }) => theme.componentSizes.borderRadius};\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n  width: 500px;\n  max-width: 90%;\n  max-height: 85vh;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  animation: ${slideUp} 0.2s ease-out;\n\n  @media (max-width: 480px) {\n    width: 95%;\n  }\n`;\n\nexport const DialogHeader = styled.div`\n  padding: ${({ theme }) => theme.spacing.md};\n  font-size: ${({ theme }) => theme.typography.h2.fontSize};\n  font-weight: ${({ theme }) => theme.typography.h2.fontWeight};\n  color: ${({ theme }) => theme.colors.onSurface.highEmphasis};\n`;\n\nexport const DialogBody = styled.div`\n  padding: ${({ theme }) => theme.spacing.md};\n  color: ${({ theme }) => theme.colors.onSurface.mediumEmphasis};\n  flex-grow: 1;\n  overflow-y: auto;\n`;\n\nexport const DialogFooter = styled.div`\n  padding: ${({ theme }) => theme.spacing.md};\n  display: flex;\n  justify-content: flex-end;\n  gap: ${({ theme }) => theme.spacing.sm};\n`;\n\nexport const DialogCloseButton = styled.button`\n  position: absolute;\n  top: ${({ theme }) => theme.spacing.sm};\n  right: ${({ theme }) => theme.spacing.sm};\n  background: transparent;\n  border: none;\n  color: ${({ theme }) => theme.colors.onSurface.mediumEmphasis};\n  cursor: pointer;\n  font-size: 1.25rem;\n`;\n","import React from \"react\";\nimport {\n  DialogOverlay,\n  DialogContainer,\n  DialogHeader,\n  DialogBody,\n  DialogFooter,\n} from \"./style\";\nimport { DialogProps } from \"./types\";\n\nconst Dialog: React.FC<DialogProps> = ({\n  isOpen,\n  onClose,\n  header,\n  children,\n  footer,\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <DialogOverlay onClick={onClose}>\n      <DialogContainer onClick={(e) => e.stopPropagation()}>\n        {header && <DialogHeader>{header}</DialogHeader>}\n        <DialogBody>{children}</DialogBody>\n        {footer && <DialogFooter>{footer}</DialogFooter>}\n      </DialogContainer>\n    </DialogOverlay>\n  );\n};\n\nexport default Dialog;\n"],"names":[],"sourceRoot":""}