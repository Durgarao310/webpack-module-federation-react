{"version":3,"file":"components-Checkbox-index-stories.f5b09e97.iframe.bundle.js","mappings":";;;;AA0DA;AACA;AACA;;;;AAIA;;;AAGA;AAGA;;;AAGA;;AAEA;;AAEA;;AAEA;AArDA;AACA;AACA;AAmDA;AACA;AAvCA;;;AAGA;AACA;;;;AAIA;;;AA+BA;;;AAGA;AASA;;;;;;;;AAgBA;AACA;;;;;;;;AAeA;AACA;;;AAGA;AACA;;;AAGA;;;;;;AAMA;;;;;AAaA;;;;;AC7IA;;;AAGA;AAMA;AACA;AACA;AACA;AACA;;;;;AAMA;;;AAGA;AAGA;;;;AAIA;AAGA;;;;;;;;;;ACrCA","sources":["webpack://ui/./src/components/Checkbox/style.ts","webpack://ui/./src/components/Label/styles.ts","webpack://ui/./src/components/Label/index.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { StyledCheckBoxProps, CheckBoxSize, CheckBoxVariant } from './types';\n\nconst getSizeStyles = (size: CheckBoxSize = 'medium', theme: any) => {\n  // More appropriate checkbox sizes for better visual balance\n  const sizeMap = {\n    small: theme.spacing.sm,    // 8px -> too small, let's use 12px\n    medium: theme.spacing.md,   // 16px \n    large: '20px',              // 20px\n  };\n  \n  // More refined sizes for better proportion\n  const refinedSizeMap = {\n    small: '12px',              // Small but usable\n    medium: theme.spacing.md,   // 16px - good default\n    large: '20px',              // Large but not overwhelming\n  };\n  \n  // Smaller border radius for checkboxes (proportional to size)\n  const borderRadiusMap = {\n    small: '2px',               // Very subtle rounding\n    medium: theme.spacing.xs,   // 4px\n    large: theme.spacing.xs,    // 4px\n  };\n  \n  return css`\n    width: ${refinedSizeMap[size]};\n    height: ${refinedSizeMap[size]};\n    border-radius: ${borderRadiusMap[size]};\n  `;\n};\n\nconst getVariantStyles = (variant: CheckBoxVariant = 'primary', theme: any) => {\n  const variants = {\n    primary: theme.colors.primary,\n    secondary: theme.colors.secondary,\n    success: theme.colors.success,\n    error: theme.colors.error,\n  };\n  \n  return css`\n    accent-color: ${variants[variant]};\n    \n    &:checked {\n      background-color: ${variants[variant]};\n      border-color: ${variants[variant]};\n    }\n    \n    &:focus {\n      outline: 2px solid ${variants[variant]}33;\n      outline-offset: 2px;\n    }\n  `;\n};\n\nexport const StyledCheckBoxContainer = styled.label<StyledCheckBoxProps>`\n  display: inline-flex;\n  align-items: center;\n  gap: ${({ theme }) => theme.spacing.sm};\n  cursor: ${({ $disabled }) => ($disabled ? 'not-allowed' : 'pointer')};\n  opacity: ${({ $disabled }) => ($disabled ? 0.6 : 1)};\n  user-select: none;\n  \n  &:hover {\n    opacity: ${({ $disabled }) => ($disabled ? 0.6 : 0.8)};\n  }\n  \n  transition: opacity ${({ theme }) => theme.transitions.duration} ${({ theme }) => theme.transitions.easing};\n`;\n\nexport const StyledCheckBox = styled.input<StyledCheckBoxProps>`\n  appearance: none;\n  margin: 0;\n  border: 2px solid ${({ theme }) => theme.colors.onSurface.mediumEmphasis};\n  background-color: transparent;\n  cursor: ${({ $disabled }) => ($disabled ? 'not-allowed' : 'pointer')};\n  position: relative;\n  transition: all ${({ theme }) => theme.transitions.duration} ${({ theme }) => theme.transitions.easing};\n  \n  ${({ $size, theme }) => getSizeStyles($size, theme)}\n  ${({ $variant, theme }) => getVariantStyles($variant, theme)}\n  \n  &:checked {\n    background-color: ${({ $variant = 'primary', theme }) => {\n      const variants = {\n        primary: theme.colors.primary,\n        secondary: theme.colors.secondary,\n        success: theme.colors.success,\n        error: theme.colors.error,\n      };\n      return variants[$variant];\n    }};\n    border-color: ${({ $variant = 'primary', theme }) => {\n      const variants = {\n        primary: theme.colors.primary,\n        secondary: theme.colors.secondary,\n        success: theme.colors.success,\n        error: theme.colors.error,\n      };\n      return variants[$variant];\n    }};\n    \n    &::after {\n      content: 'âœ“';\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      color: ${({ theme }) => theme.colors.onPrimary};\n      font-size: ${({ $size = 'medium', theme }) => {\n        const fontSizes = {\n          small: '8px',                             // Smaller for 12px checkbox\n          medium: '10px',                           // Proportional for 16px checkbox\n          large: '12px',                            // Proportional for 20px checkbox\n        };\n        return fontSizes[$size];\n      }};\n      font-weight: bold;\n      line-height: 1;\n    }\n  }\n  \n  &:disabled {\n    cursor: not-allowed;\n    background-color: ${({ theme }) => theme.colors.onSurface.disabled};\n    border-color: ${({ theme }) => theme.colors.onSurface.disabled};\n    \n    &:checked {\n      background-color: ${({ theme }) => theme.colors.onSurface.disabled};\n      border-color: ${({ theme }) => theme.colors.onSurface.disabled};\n      \n      &::after {\n        color: ${({ theme }) => theme.colors.onSurface.mediumEmphasis};\n      }\n    }\n  }\n  \n  &:hover:not(:disabled) {\n    border-color: ${({ $variant = 'primary', theme }) => {\n      const variants = {\n        primary: theme.colors.primary,\n        secondary: theme.colors.secondary,\n        success: theme.colors.success,\n        error: theme.colors.error,\n      };\n      return variants[$variant];\n    }};\n  }\n  \n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ $variant = 'primary', theme }) => {\n      const variants = {\n        primary: theme.colors.primary,\n        secondary: theme.colors.secondary,\n        success: theme.colors.success,\n        error: theme.colors.error,\n      };\n      return variants[$variant];\n    }}33;\n  }\n`;\n","// src/components/FormComponents/Label/Label.styles.ts\nimport styled, { css } from 'styled-components';\n\nexport const StyledLabel = styled.label<{\n  $isError?: boolean;\n  $isDisabled?: boolean;\n  $size?: 'small' | 'medium' | 'large';\n}>`\n  display: inline-flex;\n  align-items: center;\n  gap: ${({ theme }) => theme.spacing.sm}; /* Example: theme.spacing.small from your M3 theme */\n\n  /* --- REFINED TYPOGRAPHY APPLICATION --- */\n  ${({ theme, $size }) => {\n    // Determine which typography tokens to use based on the size prop\n    // Default to 'small' if $size is not explicitly provided or is undefined\n    const typographyTokens = theme.typography.label[$size || 'small'];\n\n    return css`\n      font-family: ${typographyTokens.fontFamily};\n      font-size: ${typographyTokens.fontSize};\n      font-weight: ${typographyTokens.fontWeight};\n      line-height: ${typographyTokens.lineHeight};\n      letter-spacing: ${typographyTokens.letterSpacing};\n    `;\n  }}\n  /* --- END REFINED TYPOGRAPHY APPLICATION --- */\n\n\n  color: ${({ theme }) => theme.colors.onSurfaceVariant}; /* Default M3 label color */\n\n  /* Apply error state styles */\n  ${({ $isError, theme }) =>\n    $isError &&\n    css`\n      color: ${theme.colors.error};\n    `}\n\n  /* Apply disabled state styles */\n  ${({ $isDisabled, theme }) =>\n    $isDisabled &&\n    css`\n      color: ${theme.colors.onSurface.withOpacity(0.38)}; /* M3 disabled opacity */\n      cursor: not-allowed;\n    `}\n\n  .label-icon {\n    display: flex;\n    align-items: center;\n    /* You might want to size icons consistently here or via icon component props */\n    color: inherit; /* Icons inherit label color */\n  }\n`;","// src/components/FormComponents/Label/Label.tsx\nimport React from 'react';\nimport { LabelProps } from './types';\nimport { StyledLabel } from './styles';\n\nconst Label: React.FC<LabelProps> = ({\n  children,\n  startingIcon,\n  endIcon,\n  htmlFor,\n  isError = false,\n  isDisabled = false,\n  size = 'medium', // Default size to 'medium'\n}) => {\n  return (\n    <StyledLabel\n      htmlFor={htmlFor}\n      $isError={isError}\n      $isDisabled={isDisabled}\n      $size={size} // Pass the size prop\n    >\n      {startingIcon && <span className=\"label-icon\">{startingIcon}</span>}\n      {children}\n      {endIcon && <span className=\"label-icon\">{endIcon}</span>}\n    </StyledLabel>\n  );\n};\n\nexport default Label;"],"names":[],"sourceRoot":""}